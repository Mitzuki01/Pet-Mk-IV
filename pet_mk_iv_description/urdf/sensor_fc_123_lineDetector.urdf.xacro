<?xml version="1.0" encoding="utf-8"?>
<!--
  \licens       Software License Agreement (MIT)
  \file         <workspace>/src/pet_mk_iv_description/urdf/sensor_fc_123_lineDetector.urdf.xacro
  \authors      stefan.kull@gmail.com (Github ID 'SeniorKullken')
  \repository   https://github.com/kullken/Pet-Mk-IV
  \repository   https://github.com/kullken/pet_mcu_base
  \copyright    
  \description  FC-123 breakout board using CTRT5000 Infrared sensors for tracing (aka. "Line Follower")
                origin_xyz: At the bottom. Between IR diode & IR receiver    
  ____________________________________________________________________________
  \usage
    <robot>
    <xacro:include filename="$(find pet_mk_iv_description)/urdf/sensor_fc_123_lineDetector.urdf.xacro"/>
      ....
    <xacro:sensor_fc_123_lineDetector sensor_prefix="left" 
                  topic="line_sensors/left"
                  origin_xyz="0.050 0.0 0.002"
                  origin_rpy="0 0 0"/>
      ....
    </robot>
  ____________________________________________________________________________
  /todo       Refactoring: Change macro name from "lineFollower" to => "lineSensor" (or maybe "groundSensor")
  /todo       Refactoring: Change item/xml name from "line_follower" to => "line_sensor"

  Xacro common info:
    The entirety of the code below is reproduced whenever the macro is called.
    We use 'params' to add additional arguments to the macro call, 
    which can be simple parameters, or entire code blocks.

  \reference http://wiki.ros.org/xacro
  \reference http://wiki.ros.org/urdf/XML/robot
  \reference http://sdformat.org/
  \reference http://gazebosim.org/tutorials?tut=ros_gzplugins#Camera
-->
<robot xmlns:xacro="http://www.ros.org/wiki/xacro">
  <xacro:macro name="sensor_fc_123_lineDetector" params="sensor_prefix topic origin_xyz origin_rpy">
    <xacro:property name="sensor_gazebo_color" value="Gazebo/DarkYellow"/>
    <xacro:property name="sensor_rviz_color"   value="white"/>
    <xacro:property name="PI" value="3.14159265359"/>   <!-- unit n/a  -->

    <xacro:property name="pcb2sensor_offset_x"  value="0.012"/> <!-- D=12mm  -->
    <xacro:property name="pcb2sensor_offset_y"  value="0.000"/> <!-- D=0.0mm  -->
    <xacro:property name="pcb2sensor_offset_z"  value="0.006"/> <!-- D=6mm  -->

    <xacro:property name="pcb_length"   value="0.0350"/> <!-- Box x=35mm  -->
    <xacro:property name="pcb_width"    value="0.0100"/> <!-- Box y=10mm  -->
    <xacro:property name="pcb_thicknes" value="0.0015"/> <!-- Box z=1.5mm -->

    
    <link name='${sensor_prefix}_line_follower_link'>
      <visual name='${sensor_prefix}_visual_pcb'>
        <origin xyz="${pcb2sensor_offset_x} ${pcb2sensor_offset_y} ${pcb2sensor_offset_z}" rpy="0 0 0"/>
        <geometry>
          <box size="${pcb_length} ${pcb_width} ${pcb_thicknes}"/>
        </geometry>
        <material name='${sensor_rviz_color}'/>
      </visual>

      <visual name='${sensor_prefix}_visual_sensor'>
        <origin xyz="0.000 0.000 0.003" rpy="0 0 0"/>
        <geometry>
          <box size="0.010 0.005 0.006"/>  <!-- CTRT5000 Sensor Size = 10x5x6 mm -->
        </geometry>
        <material name="black"/>
      </visual>

      <inertial>
        <mass value="1e-5" />
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
      </inertial>
    </link>

    <joint name='${sensor_prefix}_line_follower_joint' type="fixed">
      <axis xyz="0 1 0" />
      <origin xyz="${origin_xyz}" rpy="${origin_rpy}" />
      <parent link="base_link"/>
      <child  link="${sensor_prefix}_line_follower_link"/>
    </joint>

    <link name='${sensor_prefix}_line_follower_camera_link'>
      <!-- Empty link -> Attach to camera. Needed to be able to rotate the camera downwards.
            So that sensor/pcb and the sensor/camera could have different rotations. -->
    </link> 

    <joint name='${sensor_prefix}_line_follower_camera_joint' type="fixed">
      <axis xyz="0 1 0" />
      <origin xyz="0.0 0.0 0.0" rpy="0.0 ${PI/2} 0.0"/> <!-- Rotate camera downwards -->
      <parent link="${sensor_prefix}_line_follower_link"/>
      <child  link="${sensor_prefix}_line_follower_camera_link"/>
    </joint>

    <!--
       \todo Gazebo-simulator plugin-description...=> Move to a separate Gazebo package?
    -->
    <gazebo reference="${sensor_prefix}_line_follower_camera_link">
      <sensor type="camera" name="${sensor_prefix}_line_follower_sensor">
        <update_rate>30.0</update_rate>
        <camera name="${sensor_prefix}_line_follower_camera">
          <horizontal_fov>1.3962634</horizontal_fov>
          <image>
            <!-- Single pixel gray-scale sensor -->
            <width>5</width>
            <height>5</height>
            <format>L8</format>
          </image>
          <!-- Range 5mm=>30mm -->
          <clip>  
            <near>0.005</near>  
            <far>0.030</far>
          </clip>
          <noise>
            <type>gaussian</type>
            <!--
              Noise is sampled independently per pixel on each frame.
              That pixel's noise value is added to each of its color
              channels, which at that point lie in the range [0,1]. 
            -->
            <mean>0.0</mean>
            <stddev>0.007</stddev>
          </noise>
        </camera>
        <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
          <alwaysOn>true</alwaysOn>
          <updateRate>0.0</updateRate>
          <!--  
            generates the following rostopics
              /${topic}/camera_info
              /${topic}/image_raw 
          -->
          <cameraName>${topic}</cameraName>
          <imageTopicName>image_raw</imageTopicName>
          <cameraInfoTopicName>camera_info</cameraInfoTopicName>
          <frameName>${sensor_prefix}_line_follower_camera_link</frameName>
          <hackBaseline>0.07</hackBaseline>
          <distortionK1>0.0</distortionK1>
          <distortionK2>0.0</distortionK2>
          <distortionK3>0.0</distortionK3>
          <distortionT1>0.0</distortionT1>
          <distortionT2>0.0</distortionT2>
        </plugin>
      </sensor>
    </gazebo>

    <gazebo reference="${sensor_prefix}_camera_link">
      <material>${sensor_gazebo_color}</material>
    </gazebo>
    
  </xacro:macro>
</robot>